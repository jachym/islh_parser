# -*- coding: utf-8 -*-
"""
/***************************************************************************
 islh_parser
                                 A QGIS plugin
 Display data from forest plan format
                              -------------------
        begin                : 2015-12-18
        git sha              : $Format:%H$
        copyright            : (C) 2015 by Jelen
        email                : godzilalalala@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt4.QtCore import QSettings, QTranslator, qVersion, QCoreApplication, Qt
from PyQt4.QtGui import QAction, QIcon, QFileDialog, QDialog, QMessageBox, QInputDialog
# Initialize Qt resources from file resources.py
import resources

# Import the code for the DockWidget
from islh_dockwidget import islh_parserDockWidget
import os.path

from lxml import etree
import simplejson as json
from osgeo import ogr
from qgis.core import QgsFeatureRequest


class islh_parser:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface

        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'islh_parser_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&LHPO data viewer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'islh_parser')
        self.toolbar.setObjectName(u'islh_parser')

        #print "** INITIALIZING islh_parser"

        self.pluginIsActive = False
        self.dockwidget = None



    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('islh_parser', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/islh_parser/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'ISLH'),
            callback=self.run,
            parent=self.iface.mainWindow())

    #--------------------------------------------------------------------------

    def onClosePlugin(self):
        """Cleanup necessary items here when plugin dockwidget is closed"""

        #print "** CLOSING islh_parser"

        # disconnects
        self.dockwidget.closingPlugin.disconnect(self.onClosePlugin)

        # remove this statement if dockwidget is to remain
        # for reuse if plugin is reopened
        # Commented next statement since it causes QGIS crashe
        # when closing the docked window:
        # self.dockwidget = None

        self.pluginIsActive = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        #print "** UNLOAD islh_parser"

        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&LHPO data viewer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    #--------------------------------------------------------------------------


    #widget functions
    #--------------------------------------------------------------------------

    def select_input_xml(self):
        filename = QFileDialog.getOpenFileName(self.dockwidget, "Select ISLH XML file ","", '*.xml')
        self.dockwidget.input_file.setText(filename)

    def select_dir(self):
        outp_dir = QFileDialog.getExistingDirectory(self.dockwidget, "Select output directory")
        self.dockwidget.input_dir.setText(outp_dir)


    def read_islh(self):

        if not self.dockwidget.input_file.text() or not self.dockwidget.input_dir.text():
            QMessageBox.critical(QDialog()
                    ,"Missing file","file or directory is not selected")
        else:
            try:
                self.f = open(self.dockwidget.input_file.text())
                #nachroustam xml
                self.load_xml()

                lhc_list = [self.lhc.get('LHC_KOD')]
                self.dockwidget.input_lhc.clear()
                self.dockwidget.input_lhc.addItems(lhc_list)

                self.psk_file = "%s/psk.geojson"%self.dockwidget.input_dir.text()

                self.dockwidget.output_working_on.setText("Generating PSK layer")

                f = open(self.psk_file, 'w')

                f.write(
                        self.get_layer('ODD/DIL/POR/PSK')
                        )
                f.close()

                self.psk_layer = self.iface.addVectorLayer(self.psk_file
                        , 'PSK', 'ogr')

                self.crs = self.psk_layer.crs()
                self.crs.createFromId(5514)
                self.psk_layer.setCrs(self.crs)


            except:
                QMessageBox.critical(QDialog()
                        ,"Invalid file","file is invalid")


    def select_lhc(self):
        self.dockwidget.input_odd.clear()
        self.dockwidget.input_dil.clear()
        self.dockwidget.input_por.clear()
        self.dockwidget.input_psk.clear()

        self.dockwidget.input_odd.addItems(
                [ odd.get('ODD') for odd in self.lhc.xpath('ODD')]
                )

    def select_odd(self):
        self.odd = self.lhc.find("ODD[@ODD='%s']"%self.dockwidget.input_odd.currentText())

        self.dockwidget.input_dil.clear()
        self.dockwidget.input_por.clear()
        self.dockwidget.input_psk.clear()
        self.dockwidget.input_dil.addItems(
                [ dil.get('DIL') for dil in self.odd.xpath('DIL')]
                )

    def select_dil(self):
        self.dil = self.odd.find("DIL[@DIL='%s']"%self.dockwidget.input_dil.currentText())

        self.dockwidget.input_por.clear()
        self.dockwidget.input_psk.clear()
        self.dockwidget.input_por.addItems(
                [ por.get('POR') for por in self.dil.xpath('POR')]
                )

    def select_por(self):
        self.por = self.dil.find("POR[@POR='%s']"%self.dockwidget.input_por.currentText())

        self.dockwidget.input_psk.clear()
        self.dockwidget.input_psk.addItems(
                [ psk.get('PSK') for psk in self.por.xpath('PSK')]
                )

    def select_psk(self):
        self.psk = self.por.find("PSK[@PSK='%s']"%self.dockwidget.input_psk.currentText())

        self.jprl = (
                self.lhc.get('LHC_KOD')
                , self.odd.get('ODD')
                , self.dil.get('DIL')
                , self.por.get('POR')
                , self.psk.get('PSK'))

        request = QgsFeatureRequest().setFilterExpression( 
                "lhc_kod = '%s' AND odd = '%s' AND dil ='%s' AND por = '%s' AND psk = '%s'"%
                self.jprl)

        it = self.psk_layer.getFeatures( request )
        self.psk_layer.setSelectedFeatures([f.id() for f in it])

        box = self.psk_layer.boundingBoxOfSelected()
        self.iface.mapCanvas().setExtent(box)
        self.iface.mapCanvas().refresh()

    

    #--------------------------------------------------------------------------
    def run(self):
        """Run method that loads and starts the plugin"""

        if not self.pluginIsActive:
            self.pluginIsActive = True

            #print "** STARTING islh_parser"

            # dockwidget may not exist if:
            #    first run of plugin
            #    removed on close (see self.onClosePlugin method)
            if self.dockwidget == None:
                # Create the dockwidget (after translation) and keep reference
                self.dockwidget = islh_parserDockWidget()

            # connect to provide cleanup on closing of dockwidget
            self.dockwidget.closingPlugin.connect(self.onClosePlugin)

            # show the dockwidget
            # TODO: fix to allow choice of dock location
            self.iface.addDockWidget(Qt.LeftDockWidgetArea, self.dockwidget)
            self.dockwidget.show()

            #buttons actions
            self.dockwidget.input_file.clear()
            self.dockwidget.input_file_button.clicked.connect(self.select_input_xml)

            self.dockwidget.input_dir.clear()
            self.dockwidget.input_dir_button.clicked.connect(self.select_dir)

            self.dockwidget.input_read.clicked.connect(self.read_islh)

            self.dockwidget.input_lhc.activated.connect(self.select_lhc)
            self.dockwidget.input_odd.activated.connect(self.select_odd)
            self.dockwidget.input_dil.activated.connect(self.select_dil)
            self.dockwidget.input_por.activated.connect(self.select_por)
            self.dockwidget.input_psk.activated.connect(self.select_psk)

    #----------------------------------------------------
    #plugin logic
    def load_xml(self):
        """:param f: file with islh xml data"""
        self.doc = etree.parse(self.f)
        self.root = self.doc.getroot()
        self.lhc = self.root.find("./LHC")

    def get_layer(self, PATH):
        """return layer with psk as geoJSON"""

        featureCount = len(self.lhc.xpath(PATH))
        self.dockwidget.progressBar.setRange(0, featureCount)
        self.progres = iter(range(0, featureCount))

        features = [self.feature_to_dict(psk) for psk in self.lhc.xpath(PATH)]

        return (
                json.dumps(
                    {  "type": "FeatureCollection",
                        "features":features
                        }
                    , indent = 3)
                )

    def feature_to_dict(self, node):
        """:param node: etree element psk"""

        feature = {}
        feature['properties'] = dict(node.attrib)

        #codes of parent elements
        if node.tag in ('PSK', 'BZL', 'JP', 'OP'):
            feature['properties'].update({'lhc_kod': node.find('../../../..').get('LHC_KOD')})
            feature['properties'].update({'odd': node.find('../../..').get('ODD')})
            feature['properties'].update({'dil': node.find('../..').get('DIL')})
            feature['properties'].update({'por': node.find('..').get('POR')})

        if node.tag == 'PSK':
            feature['properties']['etz'] = [dict(etz.attrib) for etz in node.xpath('ETZ')]

        #geom = self.parse_geometry(psk['PSK_OBRAZ'])
        geom_tag = {
                'PSK':'PSK_OBRAZ'
                , 'BZL':'BZL_OBRAZ'
                , 'JP':'JP_OBRAZ'
                , 'OP':'OP_OBRAZ'
                , 'KLO':'LIN_OBRAZ'
                , 'KTO':'TXT_OBRAZ'
                , 'KBO':'BOD_OBRAZ'
                , 'KPO':'PLO_OBRAZ'
                }[node.tag]

        feature['geometry'] = json.loads(
                (self.parse_geometry(node.find(geom_tag))).ExportToJson()
                )

        self.dockwidget.progressBar.setValue(self.progres.next())

        return(feature)

    ##geometry
    def parse_geometry(self, gr):
        """node s ISLH grafikou"""

        for g in gr:
            geom = (
                    islh_parser.parse_point(g) if g.tag == 'B'
                    else islh_parser.parse_line(g) if g.tag == 'L'
                    else islh_parser.parse_polygon(g) if g.tag == 'P'
                    else islh_parser.parse_multipolygon(g) if g.tag == 'MP' 
                    else None) 
        return(geom)

    @staticmethod
    def parse_point(p):
        """udělá z bodu ogr bod"""

        (y,x) = map(lambda x: -float(x), p.get('S').split('$'))
        point = ogr.Geometry(ogr.wkbPoint)
        point.AddPoint(x, y)
        return(point)

    @staticmethod
    def parse_line(l):
        """udělá z bodu ogr bod"""

        line = ogr.Geometry(ogr.wkbLineString)

        for p in l:
            (y,x) = map(lambda x: -float(x), p.get('S').split('$'))
            line.AddPoint(x,y)

        return(line)

    @staticmethod
    def parse_ring(r):
        """udělá z bodu ogr bod"""

        ring = ogr.Geometry(ogr.wkbLinearRing)

        for p in r:
            (y,x) = map(lambda x: -float(x), p.get('S').split('$'))
            ring.AddPoint(x,y)

        return(ring)

    @staticmethod
    def parse_polygon(p):
        poly = ogr.Geometry(ogr.wkbPolygon)

        for r in p:
            poly.AddGeometry(
                    islh_parser.parse_ring(r)
                    )

        return(poly)

    @staticmethod
    def parse_multipolygon(p):
        multipoly = ogr.Geometry(ogr.wkbMultiPolygon)

        for poly in p:
            multipoly.AddGeometry(
                    islh_parser.parse_polygon(poly)
                    )
        return(multipoly)
